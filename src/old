
            /*
            0xA000 => {
                // Annn - LD I, addr
                self.i = opcode & 0x0FFF;
                self.pc += 2;
                Ok(())
            }
            0x1000 => {
                // 1nnn - JP addr
                self.pc = opcode & 0x0FFF;
                Ok(())
            }
            0x2000 => {
                // 2nnn - CALL addr
                self.sp += 1;
                self.stack[self.sp - 1] = self.pc;
                self.pc = opcode & 0x0FFF;
                Ok(())
            }
            0x3000 => {
                // 3xkk - SE Vx, byte
                let idx: usize = ((opcode >> 8) & 0x0F) as usize;
                if idx > 16 {
                    return Err(CpuError(format!(
                        "Attempt to access a 'V[{}]' register which doesn't exist",
                        idx
                    )));
                }
                let val: u16 = opcode & 0x00FF;
                if u16::from(self.v[idx]) == val {
                    self.skip_ins();
                }
                Ok(())
            }
            0x4000 => {
                // 4xkk - SNE Vx, byte
                let idx: usize = ((opcode >> 8) & 0x0F) as usize;
                if idx > 16 {
                    return Err(CpuError(format!(
                        "Attempt to access a 'V[{}]' register which doesn't exist",
                        idx
                    )));
                }
                let val: u16 = opcode & 0x00FF;
                if u16::from(self.v[idx]) != val {
                    self.skip_ins();
                }
                Ok(())
            }
            0x5000 => {
                // 5xy0 - SE Vx, Vy
                let x: usize = ((opcode >> 8) & 0x0F) as usize;
                let y: usize = ((opcode >> 4) & 0x00F) as usize;
                if self.v[x] == self.v[y] {
                    self.skip_ins();
                }
                Ok(())
            }
            0x6000 => {
                // 6xkk - LD Vx, byte
                let x: usize = ((opcode >> 8) & 0x0F) as usize;
                let kk: u8 = (opcode & 0x00FF) as u8;
                println!("{x}, {kk}");
                self.v[x] = kk;
                Ok(())
            }
            0x7000 => {
                // 7xkk - ADD Vx, byte
                let x: usize = ((opcode >> 8) & 0x0F) as usize;
                let kk: u8 = (opcode & 0x00FF) as u8;
                let result = self.v[x] + kk;
                self.v[x] = result;
                Ok(())
            }
            0x8000 => {
                // Check last nibble to determine instruction
                let x: usize = ((opcode >> 8) & 0x0F) as usize;
                let y: usize = ((opcode >> 4) & 0x00F) as usize;
                match opcode & 0x000F {
                    0x0000 => {
                        // 8xy0 - LD Vx, Vy
                        self.v[x] = self.v[y];
                        Ok(())
                    }
                    0x0001 => {
                        // 8xy1 - OR Vx, Vy
                        let result: u8 = self.v[x] | self.v[y];
                        self.v[x] = result;
                        Ok(())
                    }
                    0x0002 => {
                        // 8xy2 - AND Vx, Vy
                        let result: u8 = self.v[x] & self.v[y];
                        self.v[x] = result;
                        Ok(())
                    }
                    0x0003 => {
                        // 8xy3 - XOR Vx, Vy
                        let result: u8 = self.v[x] ^ self.v[y];
                        self.v[x] = result;
                        Ok(())
                    }
                    0x0004 => {
                        // 8xy4 - ADD Vx, Vy
                        let (result, overflow) = self.v[x].overflowing_add(self.v[y]);
                        if overflow {
                            self.v[0xF] = 1;
                        }
                        else {
                            self.v[0xF] = 0;
                        }
                        self.v[x] = result;
                        Ok(())
                    }
                    0x0005 => {
                        // 8xy5 - SUB Vx, Vy
                        let (result, overflow) = self.v[x].overflowing_sub(self.v[y]);
                        if !overflow {
                            self.v[0xF] = 1;
                        }
                        else {
                            self.v[0xF] = 0;
                        }
                        self.v[x] = result;
                        Ok(())
                    }
                    0x0006 => {
                        // 8xy6 - SHR Vx {, Vy}
                        if self.v[x] & 0x0001 == 1 {
                            self.v[0xF] = 1;
                        }
                        else {
                            self.v[0xF] = 0;
                        }
                        self.v[x] = self.v[x] >> 1;
                        Ok(())
                    }
                    _ => Err(CpuError(format!("Unknown OpCode: {:#06X}", opcode))),
                }
            }

            0x0000 => {
                // Check nibbles beside the first to decode opcode
                match opcode & 0x000F {
                    0x0000 => {
                        // 00E0 - CLS
                        self.display = Array2D::filled_with(false, CHIP_8_HEIGHT, CHIP_8_WIDTH);
                        self.pc += OPCODE_SIZE as u16; // Increment program counter, so that it points to the next OPCODE
                        Ok(())
                    }
                    0x000E => {
                        // 00EE - RET
                        self.pc = self.stack[self.sp - 1];
                        self.sp -= 1;
                        Ok(())
                    }
                    _ => Err(CpuError(format!("Unknown OpCode: {:#06X}", opcode))),
                }
            }
            _ => Err(CpuError(format!("Unknown OpCode: {:#06X}", opcode))),
            */
